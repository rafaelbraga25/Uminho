/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentation;

import Business.BusinessFacade;
import Business.Pair;
import Business.UCInvalida;
import Business.UtilizadorInvalido;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JPanel;

/**
 *
 * @author rafae
 */
public class TeacherPage extends javax.swing.JFrame implements Observer {

    private final String COMMIT = "Submeter";
    
    
    private final BusinessFacade bFacade;
    private final List<MCUPanel> mcuPanels;
    private List<MClassesPanel> mClasses;
    private int isMPanelSelected;
    private final boolean classesStarted;
    
    
    public TeacherPage(BusinessFacade bFacade) {
        this.bFacade = bFacade;
        classesStarted = ConfigReader.readFile();
        mcuPanels = new ArrayList<>();
        mClasses = new ArrayList<>();
        isMPanelSelected = 0;
        initComponents();
        this.styleComponents();
    }
    
    
    @Override
    public void update(Observable observable, Object object) {
        mainPanel.removeAll();
        mClasses = new ArrayList<>();
        
        if (isMPanelSelected == 2) {
            this.initMPanel();
        } else if (isMPanelSelected == 0) {
            this.initCUPanel();
        } else {
            this.initLogPanel();
        }
        
        mainPanel.repaint();
        mainPanel.revalidate();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cusButton = new javax.swing.JButton();
        mClassesButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        hButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(45, 54, 76));
        jPanel1.setPreferredSize(new java.awt.Dimension(650, 432));

        cusButton.setBackground(new java.awt.Color(88, 144, 255));
        cusButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        cusButton.setForeground(new java.awt.Color(255, 255, 255));
        cusButton.setText("UCs/Turnos");
        cusButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(35, 43, 62)));
        cusButton.setContentAreaFilled(false);
        cusButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cusButton.setOpaque(true);
        cusButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cusButtonMouseClicked(evt);
            }
        });

        mClassesButton.setBackground(new java.awt.Color(45, 54, 76));
        mClassesButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        mClassesButton.setForeground(new java.awt.Color(255, 255, 255));
        mClassesButton.setText("Faltas");
        mClassesButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(35, 43, 62)));
        mClassesButton.setContentAreaFilled(false);
        mClassesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mClassesButton.setOpaque(true);
        mClassesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mClassesButtonMouseClicked(evt);
            }
        });

        logoutButton.setBackground(new java.awt.Color(45, 54, 76));
        logoutButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(255, 255, 255));
        logoutButton.setText("Logout");
        logoutButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(35, 43, 62)));
        logoutButton.setContentAreaFilled(false);
        logoutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutButton.setOpaque(true);
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });

        mainScrollPane.setBackground(new java.awt.Color(45, 54, 76));
        mainScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(35, 43, 62)));
        mainScrollPane.setPreferredSize(new java.awt.Dimension(550, 432));

        mainPanel.setBackground(new java.awt.Color(45, 54, 76));
        mainPanel.setMinimumSize(new java.awt.Dimension(548, 430));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 548, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        mainScrollPane.setViewportView(mainPanel);

        hButton.setBackground(new java.awt.Color(45, 54, 76));
        hButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hButton.setForeground(new java.awt.Color(255, 255, 255));
        hButton.setText("Hist√≥rico");
        hButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(35, 43, 62)));
        hButton.setContentAreaFilled(false);
        hButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hButton.setOpaque(true);
        hButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cusButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mClassesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(mClassesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(hButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        bFacade.logout();
        bFacade.deleteObserver(this);
        HomeFrame h = new HomeFrame(bFacade);
        h.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutButtonMouseClicked

    private void cusButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cusButtonMouseClicked
        isMPanelSelected = 0;
        cusButton.setBackground(Color.decode(ThemeColors.BLUE_COLOR));
        mClassesButton.setBackground(Color.decode(ThemeColors.DARK_COLOR));
        hButton.setBackground(Color.decode(ThemeColors.DARK_COLOR));
        mClasses = new ArrayList<>();
        unSelectAll();
        mainPanel.removeAll();
        this.initCUPanel();
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_cusButtonMouseClicked

    private void mClassesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mClassesButtonMouseClicked
        isMPanelSelected = 2;
        cusButton.setBackground(Color.decode(ThemeColors.DARK_COLOR));
        mClassesButton.setBackground(Color.decode(ThemeColors.BLUE_COLOR));
        hButton.setBackground(Color.decode(ThemeColors.DARK_COLOR));
        mainPanel.removeAll();
        this.initMPanel();
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_mClassesButtonMouseClicked

    private void hButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hButtonMouseClicked
        isMPanelSelected = 1;
        cusButton.setBackground(Color.decode(ThemeColors.DARK_COLOR));
        mClassesButton.setBackground(Color.decode(ThemeColors.DARK_COLOR));
        hButton.setBackground(Color.decode(ThemeColors.BLUE_COLOR));
        mainPanel.removeAll();
        this.initLogPanel();
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_hButtonMouseClicked


    private void initMPanel() {
        mainPanel.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        
        c.anchor = GridBagConstraints.CENTER;
        c.gridx = 0;
        int i = 0;
        
        for (MCUPanel m : mcuPanels) {
            c.gridy = i;
            mainPanel.add(m, c);
            i++;
            
            if (m.isSelected()) {
                List<Pair<String, Integer>> alunos = 
                        bFacade.getAlunosTurno(m.getUC(), m.getTurno());
                
                for (Pair<String, Integer> p : alunos) {
                    c.gridy = i;
                    MClassesPanel mP = new MClassesPanel(
                            bFacade, m.getUC(), m.getTurno(), p);
                    
                    mClasses.add(mP);
                    mainPanel.add(mP, c);
                    i++;
                }
            }
        }
        
        JButton button = new ThemedButton(COMMIT);
        
        c.ipady = 15;
        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.WEST;
        c.insets = new Insets(20, 20, 20, 0);
        c.gridy = i;

        mainPanel.add(button, c);

        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                mClasses.forEach((m) -> {
                    int nFaltas = m.getFaltas();
                    
                    for (int j = 0; j < nFaltas; j++) {
                        bFacade.addFalta(m.getUC(), m.getTurno(), m.getAluno());
                    }
                });
                
                SuccessFrame s = new SuccessFrame();
                s.setVisible(true);
                
                isMPanelSelected = 0;
                cusButton.setBackground(Color.decode(ThemeColors.BLUE_COLOR));
                mClassesButton.setBackground(Color.decode(ThemeColors.DARK_COLOR));
                mClasses = new ArrayList<>();
                unSelectAll();
                mainPanel.removeAll();
                initCUPanel();
                mainPanel.repaint();
                mainPanel.revalidate();
            }
        });
        
        this.fillAvailableSpace(c, ++i);
    }

    
    private void unSelectAll() {
        mcuPanels.forEach((m) -> {
            m.unSelect();
        });
    }
    
    
    private void initCUPanel() {
        mainPanel.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        
        c.anchor = GridBagConstraints.NORTH;
        c.gridx = 0;
        int i;
        
        try {
            List<String> ucs = bFacade.getUCsDocente();
            i = 0;

            
            for (String u : ucs) {
                Set<String> list = bFacade.getTurnosUC(u);

                for (String t : list) {
                    c.gridy = i;
                    mainPanel.add(new TCUPanel(bFacade, u, t, classesStarted), 
                            c);

                    i++;
                }
            }
            
            this.fillAvailableSpace(c, i);
        } catch (UtilizadorInvalido | UCInvalida e) {
            throw new RuntimeException(e);
        }
    }
    
    
    private void initLogPanel() {
        mainPanel.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        
        c.anchor = GridBagConstraints.NORTH;
        c.gridx = 0;
        int i;
        
        try {
            List<String> ucs = bFacade.getUCsDocente();
            i = 0;

            
            for (String u : ucs) {
                Set<String> list = bFacade.getTurnosUC(u);

                for (String t : list) {
                    c.gridy = i;
                    mainPanel.add(new LogPanel(bFacade, u, t), 
                            c);

                    i++;
                }
            }
            
            this.fillAvailableSpace(c, i);
        } catch (UtilizadorInvalido | UCInvalida e) {
            throw new RuntimeException(e);
        }
    }
    
    
    private void fillAvailableSpace(GridBagConstraints c, int gridy) {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        panel.setOpaque(false);
        
        c.gridy = gridy;
        c.weighty = 1.0;
        c.weightx = 1.0;
            
        mainPanel.add(panel, c);
    }
    
    
    private void styleComponents() {
        this.getContentPane()
                .setBackground(Color.decode(ThemeColors.DARK_COLOR));
        
        this.bFacade.addObserver(this);
        
        if (classesStarted) {
            try {
                List<String> ucs = bFacade.getUCsDocente();

                for (String u : ucs) {
                    Set<String> list = bFacade.getTurnosUC(u);

                    list.forEach((t) -> {
                        MCUPanel m = new MCUPanel(bFacade, u, t);

                        m.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                m.setSelected();
                                mainPanel.removeAll();

                                initMPanel();

                                mainPanel.repaint();
                                mainPanel.revalidate();
                            }
                        });

                        mcuPanels.add(m);
                    });
                }
            } catch (UtilizadorInvalido | UCInvalida e) {
                throw new RuntimeException(e);
            }
        } else {
            mClassesButton.setVisible(false);
        }
        
        this.initCUPanel();   
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cusButton;
    private javax.swing.JButton hButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton mClassesButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    // End of variables declaration//GEN-END:variables
}
